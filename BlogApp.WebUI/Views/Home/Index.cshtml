@model IEnumerable<Article>
@{
    ViewData["Title"] = "Home";
}

<div class="container my-4">
    <div class="row mt-3">
        <div class="col-md-12">
            <partial name="_Slider" model="@Model.OrderBy(x => x.Date).Take(5)" />
            <h2>About the Project</h2>
            <ul>
                <li>.NET 8</li>
                <li>C# 10</li>
                <li>MSSQL Server 2019</li>
                <li>Entity Framework Core</li>
                <li>Code First with Migrations</li>
                <li>ASP.NET Core Identity</li>
            </ul>
            <p class="home-p">
                The codes are available in the public repo at the github <a href="https://github.com/gurkantuna/BlogApp" target="_blank">github.com/gurkantuna/BlogApp</a> link. Since I use EF Migration, the local db will be created automatically on any machine running SQL Server and the project will be operational. I also left the appsettings.{Environment}.json file in the presentation layer so that different connection strings other than local can be given.                
            </p>
            <p class="home-p">
                This is an example project I created with .NET Core. To maintain simplicity and because it is an ordinary blog project, I wrote the functions without any pattern or principle that's why some functions repated in controllers.
                And also, I kept the layers simple: <b>Core, Entity, DataAccess and Presentation</b>. There is no architecture similar to microservice or API gateway. Since it was an example project,
                I did not need to write layers such as Business, <b>Web Service and Web API</b> as I only had to take care of the basic needs and partial visuality.
                Due to the subdomain limitation in my own hosting, IIS runs on virtual directory, so I had to make some route settings manually. However, I created routine operations such as select, insert, update and delete with the GurkanTuna.Core library,
                which I wrote with .NET Core for my own projects. In the main project I created for the Core, <b>SOLID principles, Aspect Oriented Programming, Logging, Caching, Authentication, Authorization, Exception Handling, Performance Monitoring, Repository Pattern, Unit of WorkPattern, Business Layer, 'Cross Cutting Concerns'</b> and there are approaches. I refactor it from time to time according to my new requirements.              
            </p>
            <p class="home-p">
                I also used minified small js libraries such as lightbox, font-awesome, bootbox, ckeditor, popper, other than bootstrap, for a little visual appeal. Except for media files, only one request is made for js and css.
            </p>
            <p class="home-p">
                Adding a blog etc. from the operations link with the username "member" and password "123" functions can be executed. To exemplify authorization, Users, Claims, etc., which are normally accessed from the admin panel.
                I added the links to the navbar. However, it is only visible with the admin password.
            </p>
            <p class="font-italic text-right">Gürkan Tuna</p>
        </div>
    </div>
</div>
